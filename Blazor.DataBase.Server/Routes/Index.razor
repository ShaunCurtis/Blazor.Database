@page "/"

@using System.Diagnostics

<IndexComponent></IndexComponent>

<div>
    <p>This button works on driving events from button down and button up events - even when the button up event is outside the browser.</p>
    <button class="btn @buttoncolour" @onmousedown="(e) => OnButton(e)">Test Button Down and Up Events</button>
</div>

<EditForm Model="model">
    <InputNumber TValue="int" @bind-Value="model.Value"></InputNumber>

</EditForm>

<div>@model.Value</div>
@code {

    Model model = new Model() { Value = 4 };

    class Model
    {
        public int Value { get; set; } = 0;
    }


    [Inject] private IJSRuntime _js { get; set; }

    [JSInvokable]
    public static Task ButtonMouseUpOut()
    {
        mouseUpAction?.Invoke();
        return Task.CompletedTask;
    }

    private static Action mouseUpAction;
    private string buttoncolour = "btn-success";

    protected override Task OnInitializedAsync()
    {
        mouseUpAction = JsMouseUp;
        return base.OnInitializedAsync();
    }

    private void OnButton(MouseEventArgs e)
    {
        SetMouseUp(true);
        Debug.WriteLine("Down");
        buttoncolour = "btn-danger";
    }

    private void JsMouseUp()
    {
        Debug.WriteLine("Up");
        buttoncolour = "btn-success";
        _ = InvokeAsync(StateHasChanged);
        SetMouseUp(false);
    }

    private void SetMouseUp(bool action)
    => _js.InvokeAsync<bool>("blazor_setMouseUpEvent", action);

}

